set(GRALE_EXTERNAL_INCLUDES "")
set(GRALE_INTERNAL_INCLUDES "")
set(GRALE_LINK_LIBS "")

add_additional_stuff(INV GRALE_EXTERNAL_INCLUDES GRALE_LINK_LIBS)

find_package(ErrUt REQUIRED)
list(APPEND GRALE_EXTERNAL_INCLUDES "${ERRUT_INCLUDE_DIRS}")
list(APPEND GRALE_LINK_LIBS "${ERRUT_LIBRARIES}")

find_package(SerUt REQUIRED)
list(APPEND GRALE_EXTERNAL_INCLUDES "${SERUT_INCLUDE_DIRS}")
list(APPEND GRALE_LINK_LIBS "${SERUT_LIBRARIES}")

find_package(GSL REQUIRED)
list(APPEND GRALE_EXTERNAL_INCLUDES "${GSL_INCLUDE_DIR}")
list(APPEND GRALE_LINK_LIBS ${GSL_LIBRARIES})
list(APPEND GRALE_LINK_LIBS ${GSLCBLAS_LIBRARIES})

find_package(MOGAL REQUIRED)
list(APPEND GRALE_EXTERNAL_INCLUDES "${MOGAL_INCLUDE_DIRS}")
list(APPEND GRALE_LINK_LIBS "${MOGAL_LIBRARIES}")

find_package(MOGAL2)
if (MOGAL2_FOUND)
	list(APPEND GRALE_EXTERNAL_INCLUDES "${MOGAL2_INCLUDE_DIRS}")
	list(APPEND GRALE_LINK_LIBS "${MOGAL2_LIBRARIES}")
endif()

list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_BINARY_DIR}/core/src/general")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/core/src/general")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/core/src/cosmology")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/core/src/image")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/core/src/lens")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/core/src/math")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/core/src/source")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/core/src/galens")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/core/src/thirdparty/WildMagic5")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/core/src/")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/inversion/src/galens")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/inversion/src/prob")
list(APPEND GRALE_INTERNAL_INCLUDES "${PROJECT_SOURCE_DIR}/inversion/src/")

add_subdirectory(src)
add_subdirectory(programs)

if (NOT MSVC)
	set(GRALE_LIBS "-L${LIBRARY_INSTALL_DIR}" "-lgrale2inv")
else (NOT MSVC)
	set(GRALE_LIBS optimized "${LIBRARY_INSTALL_DIR}/grale2inv.lib" 
		       debug "${LIBRARY_INSTALL_DIR}/grale2inv_d.lib")
endif (NOT MSVC)

set(GRALE_INCDIRS ${GRALE_EXTERNAL_INCLUDES} ${CMAKE_INSTALL_PREFIX}/include)
set(GRALE_LIBS ${GRALE_LIBS} ${GRALE_LINK_LIBS})
remove_empty(GRALE_INCDIRS)
list(REMOVE_DUPLICATES GRALE_INCDIRS)
remove_empty(GRALE_LIBS)

foreach(ARG ${GRALE_LIBS})
	set(GRALEINV_LIBS_CMAKECONFIG "${GRALEINV_LIBS_CMAKECONFIG} \"${ARG}\"")
endforeach()
foreach(ARG ${GRALE_INCDIRS})
	set(GRALEINV_INCDIRS_CMAKECONFIG "${GRALEINV_INCDIRS_CMAKECONFIG} \"${ARG}\"")
endforeach()

configure_file("${PROJECT_SOURCE_DIR}/cmake/GRALEINVConfig.cmake.in" "${PROJECT_BINARY_DIR}/cmake/GRALEINVConfig.cmake")
install(FILES "${PROJECT_BINARY_DIR}/cmake/GRALEINVConfig.cmake" DESTINATION ${LIBRARY_INSTALL_DIR}/cmake/GRALEINV)


